<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- CVS History
  $Log: build_sip.xml,v $
  Revision 1.1  2007/08/13 16:08:57  tvzl8571
  Tatami Projet.

  Revision 1.1  2007/07/24 17:45:37  tvzl8571
  Tatami project

  Revision 1.1  2007/07/11 07:16:33  tvzl8571
  TatamiTest premier commit

  Revision 1.1  2007/05/25 12:27:21  beal6226
  Exemple d'utilisation de GWT avec :
  - Un menu déroulant qui fait apparaitre une popup
  - Un bouton qui fait apparaitre un hello world
  - Des champs de saisie qui modifient dynamiquement un tableau de données.
  - Une utilisation de GWT RPC pour récupérer des données côté serveur (après, c'est bouchonné, il n'y a pas de SGBD).


  Revision 1.1  2006/10/10 08:10:37  ajta5630
  Intérgration dans la barre d'outils et le menu du workbench. Intégration de l'aide

  -->
<!DOCTYPE project [
		<!ENTITY setenv SYSTEM "../conf/setenv.xml">	
	]>
<project name="build_sip" default="init" basedir="../..">

	<!-- Chargement des propriétés -->
	&setenv;
    <property file="${ant.modules.dir}/${module.type}.${module.name}.properties" />


	<!-- TARGET compile -->
	<!-- Compilation des sources du module dans un répertoire temporaire 
	${tmp.dir}/${module.type}/${module.name}/package/WEB-INF/classes. On n'utilise pas le
	répertoire classes de eclipse pour rester indépendant du jdk et de tout paramétrage. -->
	<target name="compile" depends="init" description="compilation sip">
		<ant antfile="${ant.conf.dir}/common.xml" target="compile_module">
			<property name="sub.dir" value="WEB-INF/classes" />
		</ant>
		<echo message="Compilation du module ${module.type} ${module.name} terminé" />
	</target>

	<!-- TARGET package -->
	<!-- Le packaging d'un module sip consiste à copier tous les fichiers J2EE dans le 
	répertoire temporaire du module, en remplaçant les variables du type ${variable} par 
	leur valeur pour les fichiers *.template.*.	Ensuite, on copie les librairies et on 
	package le tout dans un war ou un sar. -->
	<target name="package" depends="init" description="packaging sip">
		<!-- Copie des fichiers du répertoire j2ee -->
		<ant antfile="${ant.conf.dir}/common.xml" target="copy_j2ee" />
		<!-- Copie des librairies -->
		<ant antfile="${ant.conf.dir}/common.xml" target="copy_lib">
			<property name="sub.dir" value="WEB-INF/lib"/>
		</ant>
		<condition property="is.ubiquity">
			<equals arg1="${server.name}" arg2="ubiquity" />
		</condition>

		<condition property="sip.extension" value="war">
			<equals arg1="${server.name}" arg2="weblogic" />
		</condition>
		<condition property="sip.extension" value="sar">
			<equals arg1="${server.name}" arg2="ubiquity" />
		</condition>
		<condition property="sip.extension" value="unknown">
			<equals arg1="${server.name}" arg2="alcatel" />
		</condition>
		<condition property="sip.extension" value="undefined">
			<equals arg1="${server.name}" arg2="jonas" />
		</condition>
		<condition property="sip.extension" value="undefined">
			<equals arg1="${server.name}" arg2="websphere" />
		</condition>
		<antcall target="delete_ubiquity" />
		
		<!-- Construction du war ou du sar -->
		<echo message="Construction du fichier ${dist.dir}/${module.type}/${module.name}.${sip.extension}" />
		<tstamp>
			<format property="TODAY" pattern="d-MMM-yyyy hh:mm:ss aa" locale="en" />
		</tstamp>
		<jar destfile="${dist.dir}/${module.type}/${module.name}.${sip.extension}"
		     filesetmanifest="merge">
			<fileset dir="${tmp.dir}/${module.type}/${module.name}/${package.dir}">
			</fileset>
			<manifest>
				<attribute name="Release-Date" value="${TODAY}" />
				<attribute name="Created-By"
				           value="${java.vm.version} (${java.vm.vendor})" />
				<attribute name="Company" value="France Telecom" />
				<attribute name="Toolkit-Sip-Version" value="${toolkit.version}" />
				<attribute name="Module-Name" value="${module.name}" />
			</manifest>
		</jar>
		<echo message="========== Packaging du module terminé, consulter ${dist.dir}/${module.type}/${module.name}.${sip.extension} ==========" />
	</target>

	<!-- TARGETs conditionnelles -->
	<target name="delete_ubiquity" if="is.ubiquity">
		<delete>
			<fileset dir="${tmp.dir}/${module.type}/${module.name}/${package.dir}/WEB-INF">
				<include name="web.xml" />
			</fileset>
		</delete>
	</target>

	<!--target name="websphere_war" depends="define_websphere">
		<webdoclet destdir="${j2ee.dir}/${module.type}/${module.name}/WEB-INF" mergeDir="${j2ee.dir}/${module.type}/${module.name}/WEB-INF">
			<fileset dir="${src.dir}">
				<include name="**/*.java" />
			</fileset>
			<deploymentdescriptor useIds="yes" distributable="no" />
			<webspherewebxml virtualHostName="${websphere.host}" reloadingEnabled="false" defaultErrorPage="" additionalClassPath="" fileServingEnabled="false" directoryBrowsingEnabled="false" serveServletsByClassnameEnabled="false" preCompileJSPs="false" autoRequestEncoding="false" autoResponseEncoding="false" autoLoadFilters="false" />
		</webdoclet>
	</target>


	<target name="jonas_war" depends="define_jonas">
		<webdoclet destdir="${j2ee.dir}/${module.type}/${module.name}/WEB-INF" mergeDir="${j2ee.dir}/${module.type}/${module.name}/WEB-INF">
			<fileset dir="${src.dir}">
				<include name="**/*.java" />
			</fileset>
		</webdoclet>
	</target>

	<target name="weblogic_war" depends="define_weblogic">
		<webdoclet destdir="${j2ee.dir}/${module.type}/${module.name}/WEB-INF" mergeDir="${j2ee.dir}/${module.type}/${module.name}/WEB-INF">
			<fileset dir="${src.dir}">
				<include name="**/*.java" />
			</fileset>

			<deploymentdescriptor useIds="true" />
		</webdoclet>
	</target-->

	<!-- TARGET internet init -->
	<!-- Création des répertoires nécessaires au fonctionnement du toolkit -->
	<target name="init">
		<ant antfile="${ant.conf.dir}/common.xml" target="init" />
		<mkdir dir="${j2ee.dir}/${module.type}/${module.name}/WEB-INF" />
	</target>

</project>