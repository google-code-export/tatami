<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- CVS History
  $Log: build_ejb.xml,v $
  Revision 1.7  2007/12/20 17:15:14  beal6226
  Adaptation pour Java 1.4 et Eclipse 3.2

  Revision 1.6  2007/12/18 13:13:27  beal6226
  Version G3R2C0

  Revision 1.5  2006/11/10 16:45:52  beal6226
  exclusion META-INF dans jonas-ejbjar

  Revision 1.4  2006/11/10 10:16:00  beal6226
  ejbjar ne mettait que les .class dans le jar généré

  Revision 1.3  2006/11/07 16:07:58  beal6226
  version 3.1
  suppression du module bouchon web service
  couche d'echange et interface dans generated
  sample supprimé, accès direct dans dist/lib

  Revision 1.2  2006/11/02 13:54:48  beal6226
  Synchronisation avec referentiel plateforme Eclipse

  Revision 1.1  2006/10/10 08:10:37  ajta5630
  Intérgration dans la barre d'outils et le menu du workbench. Intégration de l'aide

  Revision 1.29  2006/03/15 16:49:55  beal6226
  La variable TODAY doit être définie dans le projet où elle est utilisée. Le timestamp est donc placé devant chaque utilisation de TODAY.
  Ajout d'une description aux tâches les plus utiles pour un accès plus facile avec la vue outline d'Eclipse.
  Ajout de doubles traits dans les messages ant pour bien visualiser la fin de construction de chaque module

  Revision 1.28  2006/03/15 09:05:51  beal6226
  mappernames supprimé dans genic car deprecated en jonas 6.6

  Revision 1.27  2006/02/17 14:52:48  beal6226
  Factorisation de la tâche init

  Revision 1.26  2006/01/24 10:50:08  yrka8220
  Ajout du module rar

  Revision 1.25  2006/01/09 13:12:10  beal6226
  Ajout répertoire jonas base au lancement de jonas-ejbjar
  Correction emplacement fichier manifest lors du packaging

  Revision 1.24  2005/12/06 13:14:46  beal6226
  Suppression des versions jonas ou weblogic dans la génération xdoclet

  Revision 1.23  2005/11/28 15:41:25  yfve7250
  Ajout du serveur websphere

  Revision 1.22  2005/09/08 13:05:49  beal6226
  Pour traiter le cas des EJB MDB qui ne contiennent pas de classe Local,
  Remote ou Home, on ajoute le MANIFEST à la liste des fichiers à
  mettre dans le jar client. Ainsi, la tâche jar ne plante pas. cf task #429

  Revision 1.21  2005/09/05 08:56:28  beal6226
  Refonte complète module web services

  Revision 1.20  2005/06/28 12:44:08  beal6226
  Xdoclet est rendu facultatif, il n'est pas utilisé si le fichier d'include n'existe pas

  Revision 1.19  2005/06/27 09:34:28  beal6226
  Ajour d'un mkdir war-ws dans dist sur les 5 build_xxx car sinon ça plante

  Revision 1.18  2005/06/27 07:55:45  beal6226
  Compilation des sources EJB + XDoclet en une seule passe à cause de dépendances possibles

  Revision 1.17  2005/06/27 07:47:16  beal6226
  On ne supprime plus les descripteurs ejb

  Revision 1.16  2005/06/10 14:17:19  nieh8376
  coorection de scripts

  Revision 1.15  2005/05/23 09:52:20  beal6226
  Génération automatique d'un jar client d'EJB contenant les interfaces et les stubs

  Revision 1.14  2005/05/10 11:12:54  beal6226
  protocoles jonas dans env.properties

  Revision 1.13  2005/05/09 14:38:23  beal6226
  ajout de dependency=none sur ejbjar

  Revision 1.12  2005/04/28 17:18:55  beal6226
  Gestion des fichiers class.include et lib.include vide par l'ajout d'un dummy_file

  Revision 1.11  2005/04/28 16:02:55  beal6226
  Refonte complète - Version finalisée modules ejb, lib, war et ear

  -->
<!DOCTYPE project [
		<!ENTITY setenv SYSTEM "../conf/setenv.xml">	
	]>
<project name="build_ejb" default="init" basedir="../..">

	<!-- Chargement des propriétés -->
	&setenv;
    <property file="${ant.modules.dir}/${module.type}.${module.name}.properties" />

	<!-- TARGET compile -->
	<!-- La compilation d'un module ejb consiste à produire les classes java d'interposition
	et les descripteurs de déploiement avec Xdoclet, et à compiler le tout. -->
	<target name="compile" depends="init" description="compilation ejb">
		<!-- Les sources EJB à traiter par Xdoclet sont recherchés par cette propriété -->
		<property name="xdocletfiles"
		          value="${ant.includes.dir}/${module.type}.${module.name}.xdoclet.include" />
		<available file="${xdocletfiles}"
		           type="file"
		           property="xdoclet.${module.name}.present" />
		<!-- ejbdoclet ne sera lancé que si le fichier ${xdocletfiles} existe -->
		<antcall target="verif_ejbdoclet" />
		<antcall target="run_ejbdoclet" />
		<antcall target="javac" />
		<echo message="Compilation du module ${module.type} ${module.name} terminé" />
	</target>

	<!-- TARGET package -->
	<!-- Le packaging d'un module ejb consiste à copier tous les fichiers J2EE dans le 
	répertoire temporaire du module, en remplaçant les variables du type ${variable} par 
	leur valeur pour les fichiers *.template.*.	Ensuite, on package le tout dans un jar 
	destiné à weblogic ou à jonas, en fonction de la variable ${server.name} -->
	<target name="package" depends="init" description="packaging ejb">
		<ant antfile="${ant.conf.dir}/common.xml" target="copy_j2ee">
			<property name="dest.dir" value="${tmp.dir}/${module.type}/${module.name}/${package.dir}" />
		</ant>
		<antcall target="${server.name}_ejbjar" />
		<antcall target="package_client" />
		<echo message="========== Packaging du module terminé, consulter ${dist.dir}/${module.type}/${module.name}.jar ==========" />
	</target>

	<!-- TARGET ejbdoclet -->
	<!-- Génération des fichiers sources ejb par xdoclet si le fichier include existe.
	Les sources sont générés dans ${tmp.dir}/${module.type}/${module.name}/xdoclet
	Ils sont recopiés dans ${generated.dir} pour être pris en compte par le projet Eclipse
	Les descripteurs sont générés dans ${j2ee.dir}/${module.type}/${module.name}/META-INF
	Ils sont renommés en ajoutant .template car ils contiennent encore éventuellement
	des variables sous la forme ${variable} qui seront substituées au packaging -->
	<target name="verif_ejbdoclet" unless="xdoclet.${module.name}.present">
		<echo message="Attention: Le fichier ${xdocletfiles} n'existe pas. Pas de génération xdoclet sur ce projet" />
	</target>

	<target name="run_ejbdoclet" depends="define_xdoclet_java14,define_xdoclet_java5" if="xdoclet.${module.name}.present" description="Lancement ejbdoclet">
		<echo message="Génération des fichiers sources ejb par xdoclet" />

		<!-- Les sources EJB à traiter par Xdoclet sont recherchés par cette propriété -->
		<property name="xdocletfiles"
		          value="${ant.includes.dir}/${module.type}.${module.name}.xdoclet.include" />
		<available file="${xdocletfiles}"
		           type="file"
		           property="xdoclet.${module.name}.present" />
		<fail unless="xdoclet.${module.name}.present"
		      message="Attention: Le fichier ${xdocletfiles} n'existe pas. Packaging du projet impossible" />

		<!-- Génération des interfaces et des descripteurs xml des EJB de l'application -->
		<mkdir dir="${tmp.dir}/${module.type}/${module.name}/xdoclet" />
		<tstamp>
			<format property="TODAY" pattern="d-MMM-yyyy hh:mm:ss aa" locale="en" />
		</tstamp>
		<ejbdoclet destdir="${tmp.dir}/${module.type}/${module.name}/xdoclet"
		           excludedtags="@version,@author"
		           addedtags="@xdoclet-generated at ${TODAY}"
		           ejbspec="2.1"
		           verbose="true">
			<fileset dir="${src.dir}">
				<includesfile name="${xdocletfiles}" />
			</fileset>
			<remoteinterface pattern="{0}Remote" />
			<localinterface pattern="{0}Local" />
			<homeinterface />
			<localhomeinterface pattern="{0}LocalHome" />
			<deploymentdescriptor destdir="${j2ee.dir}/${module.type}/${module.name}/META-INF"
                                  description="xdoclet"
                                  xmlencoding="ISO-8859-1"
	                              useIds="true"
             />
			<jonas 
			       xmlencoding="ISO-8859-1"
			       destdir="${j2ee.dir}/${module.type}/${module.name}/META-INF" />
			<weblogic 
			          destdir="${j2ee.dir}/${module.type}/${module.name}/META-INF"
			          xmlencoding="ISO-8859-1" />

			<websphere 
			xmlencoding="ISO-8859-1"
            destdir    = "${j2ee.dir}/${module.type}/${module.name}/META-INF"
	        useIds="true"
            />

		</ejbdoclet>

		<!-- Recopie des sources dans ${generated.dir} -->
		<copy todir="${generated.dir}">
			<fileset dir="${tmp.dir}/${module.type}/${module.name}/xdoclet" />
		</copy>

		<!-- Renommage des descripteurs xml et xmi en ajoutant .template -->
		<delete>
			<fileset dir="${j2ee.dir}/${module.type}/${module.name}/META-INF"
			         includes="*.template.xm*" />
		</delete>

		<move todir="${j2ee.dir}/${module.type}/${module.name}/META-INF">
			<fileset dir="${j2ee.dir}/${module.type}/${module.name}/META-INF">
				<include name="*.xm*" />
			</fileset>
			<mapper type="regexp" from="^(.*).xm(.*)$$" to="\1.template.xm\2" />
		</move>
	</target>

	<!-- TARGET javac -->
	<!-- Compilation des sources Xdoclet et des sources du module dans un répertoire
	temporaire ${tmp.dir}/${module.type}/${module.name}/package. On n'utilise pas le
	répertoire classes de eclipse pour rester indépendant du jdk et de tout paramétrage. 
	Il faut compiler les sources Xdoclet en même temps que les sources du projet car 
	il peut y avoir des dépendances. -->
	<target name="javac">
		<ant antfile="${ant.conf.dir}/common.xml" target="compile_module">
			<property name="sub.dir" value="" />
		</ant>
	</target>

	<!-- TARGET jonas_ejbjar -->
	<!-- Création du jar ejb de distribution pour jonas. La tâche redéfinie jonas-ejbjar
	crée le jar ejb à partir des classes et des descripteurs, en y ajoutant les stubs et
	skeleton spécifiques à jonas. Ces classes sont obligatoires avec jonas -->
	<target name="jonas_ejbjar" depends="define_jonas" description="lancement genic ejbjar">
		<echo message="Création du jar ejb pour Jonas" />
		<!-- Suppression du descripteur weblogic -->
		<delete>
			<fileset dir="${tmp.dir}/${module.type}/${module.name}/${package.dir}/META-INF"
                     includes="weblogic*.xml" />
		</delete>
		<!-- Aucune dépendance de classe n'est recherchée. Utiliser le fichier 
		${module.type}.${module.name}.class.include d'include pour ajouter d'autres classes à l'EJB -->
		<!-- Ajouter invokecmd="true" sous <jonas> si la compilation ne passe pas à cause d'une commande trop longue -->
		<jonas-ejbjar srcdir="${tmp.dir}/${module.type}/${module.name}/${package.dir}"
		              manifest="${tmp.dir}/${module.type}/${module.name}/${package.dir}/META-INF/MANIFEST.MF"
		              descriptordir="${tmp.dir}/${module.type}/${module.name}/${package.dir}/META-INF"
		              basejarname="${module.name}"
			          dependency="none">
			<jonas destdir="${dist.dir}/${module.type}"
			       jonasroot="${jonas.root}"
			       jonasbase="${jonas.base}"
			       keepgeneric="false"
			       protocols="${jonas.protocols.names}"
			       classpathref="project.classpath" />
			<include name="**/*.xml" />
			<exclude name="*-ejb-jar.xml" />
			<support dir="${tmp.dir}/${module.type}/${module.name}/${package.dir}">
				<include name="**/*" />
				<exclude name="META-INF/*" />
			</support>
		</jonas-ejbjar>
	</target>

	<!-- TARGET weblogic_ejbjar -->
	<!-- Création du jar ejb de distribution pour weblogic. La tâche wlappc
	crée le jar ejb à partir des classes et des descripteurs, en y ajoutant les stubs et
	skeleton spécifiques à weblogic. Ces classes ne sont obligatoires avec weblogic, on
	aurait pu faire simplement un jar du répertoire package -->
	<target name="weblogic_ejbjar" depends="define_weblogic" description="lancement weblogic wlappc">
		<echo message="Création du jar ejb pour Weblogic" />
		<!-- Suppression du descripteur jonas -->
		<delete>
			<fileset dir="${tmp.dir}/${module.type}/${module.name}/${package.dir}/META-INF"
                     includes="jonas*.xml"
             />
		</delete>
		<wlappc source="${tmp.dir}/${module.type}/${module.name}/${package.dir}"
		        verbose="true"
		        optimize="true"
		        output="${dist.dir}/${module.type}/${module.name}.jar">
			<classpath>
				<path refid="weblogic.classpath" />
				<path refid="project.classpath" />
			</classpath>
		</wlappc>
	</target>

	<!-- TARGET websphere_ejbjar -->
	<!-- Création du jar ejb de distribution pour websphere-->
	<target name="websphere_ejbjar" description="jar websphere">
		<echo message="Création du jar ejb pour Websphere" />
		<delete>
			<fileset dir="${tmp.dir}/${module.type}/${module.name}/${package.dir}/META-INF" includes="jonas*.xml" />
			<fileset dir="${tmp.dir}/${module.type}/${module.name}/${package.dir}/META-INF" includes="weblogic*.xml" />
		</delete>
		<jar destfile="${dist.dir}/${module.type}/${module.name}.jar" manifest="${tmp.dir}/${module.type}/${module.name}/${package.dir}/META-INF/MANIFEST.MF">
			<fileset dir="${tmp.dir}/${module.type}/${module.name}/package_server">
				<include name="**/*" />
			</fileset>
		</jar>
	</target>

	<!-- TARGET package_client -->
	<target name="package_client" description="packaging du client ejb">
		<!-- Creation libairie cliente de l'EJB XXX-client.jar (sous ensemble Stub + Home + Remote de l'EJB -->
		<!-- Inutile pour les EJB MDB, on crée simplement un jar avec juste le manifest -->
		<unjar src="${dist.dir}/${module.type}/${module.name}.jar"
				dest="${tmp.dir}/${module.type}/${module.name}/package_client">
			<patternset>
				<include name="**/*Stub.class" />
				<include name="**/*Home.class" />
				<include name="**/*Remote.class" />
				<include name="**/*Local.class" />
				<include name="**/*MANIFEST*" />
			</patternset>
		</unjar>
		<!-- le jar client est créé dans dist/lib et suffixé par "-client" -->
		<jar destfile="${dist.dir}/lib/${module.name}-client.jar">
			<fileset dir="${tmp.dir}/${module.type}/${module.name}/package_client">
				<include name="**/*"/>
			</fileset>
		</jar>
	</target>

	<!-- TARGET internet init -->
	<!-- Création des répertoires nécessaires au fonctionnement du toolkit -->
	<target name="init">
		<ant antfile="${ant.conf.dir}/common.xml" target="init" />
	</target>

</project>