<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- CVS History
	  $Log: build_ws.xml,v $
	  Revision 1.4  2007/12/18 13:13:27  beal6226
	  Version G3R2C0

	  Revision 1.3  2006/11/07 16:07:58  beal6226
	  version 3.1
	  suppression du module bouchon web service
	  couche d'echange et interface dans generated
	  sample supprimé, accès direct dans dist/lib

	  Revision 1.2  2006/11/02 13:54:48  beal6226
	  Synchronisation avec referentiel plateforme Eclipse

	  Revision 1.1  2006/10/10 08:10:37  ajta5630
	  Intérgration dans la barre d'outils et le menu du workbench. Intégration de l'aide

	  Revision 1.37  2006/03/17 14:03:48  beal6226
	  Commentaire sur wsdlfile

	  Revision 1.36  2006/03/15 16:49:55  beal6226
	  La variable TODAY doit être définie dans le projet où elle est utilisée. Le timestamp est donc placé devant chaque utilisation de TODAY.
	  Ajout d'une description aux tâches les plus utiles pour un accès plus facile avec la vue outline d'Eclipse.
	  Ajout de doubles traits dans les messages ant pour bien visualiser la fin de construction de chaque module

	  Revision 1.35  2006/03/06 13:41:19  beal6226
	  Le classpath pour wsdl2java doit être positionné dans le define_axis
	  dès la définition de la tâche, car l'élément imbriqué classpath n'est pas pris en compte.

	  Revision 1.34  2006/02/23 17:39:42  beal6226
	  Regroupement des classpath et réorganisation des librairies dans lib

	  Revision 1.33  2006/02/23 17:12:40  beal6226
	  Regroupement des classpath et réorganisation des librairies dans lib

	  Revision 1.32  2006/02/17 14:52:48  beal6226
	  Factorisation de la tâche init

	  Revision 1.31  2006/01/24 10:50:08  yrka8220
	  Ajout du module rar

	  Revision 1.30  2006/01/09 13:12:55  beal6226
	  Suppression de axis.cp du classpath de la tâche bouchonTask

	  Revision 1.29  2005/12/15 15:29:38  beal6226
	  Le client web service ne doit pas inclure les beans d'echange ou les exceptions

	  Revision 1.28  2005/11/15 09:48:00  beal6226
	  Gestion de deux fichiers de mapping différents (client et serveur) pour les web services

	  Revision 1.27  2005/10/25 11:08:00  beal6226
	  Ajout d'attributs Manifest sur jar, war, war-ws et ear

	  Revision 1.26  2005/10/21 13:50:02  beal6226
	  Ajout de filesetmanifest=merge à la construction du war

	  Revision 1.25  2005/10/03 14:27:28  beal6226
	  Compilation java en mode debug

	  Revision 1.24  2005/09/16 14:09:49  beal6226
	  Copie du wsdl pour le bouchon

	  Revision 1.23  2005/09/15 14:46:34  beal6226
	  Suppression ancienne version qui était restée dans le code

	  Revision 1.22  2005/09/05 08:56:28  beal6226
	  Refonte complète module web services

	  Revision 1.21  2005/08/05 14:56:59  yfve7250
	  update

	  Revision 1.20  2005/07/27 11:40:44  yfve7250
	  modif pr inserer automatiquement la balise wsdlFile dans le fichier wsdd

	  Revision 1.19  2005/07/20 08:46:21  yfve7250
	  ajout de la librairie mock-all.jar lors du packaging.

	  Revision 1.18  2005/07/18 14:45:05  yfve7250
	  correctifs sur la tache generation d'un wsdl a partir d'une interface pr un ejb
	  ajout d'un pattern pr la génération du wsdd

	  Revision 1.17  2005/07/08 15:53:02  nieh8376
	  *** empty log message ***

	  Revision 1.16  2005/07/05 15:08:44  yfve7250
	  correctifs pour générer les classes java à partir du wsdl suivant le fichier de  mapping des namespaces et package java
	  ajout d'une nouvelle target recompile stub pour pouvoir recompiler les classes clientes sans relancer la tache de recréation des stubs

	  Revision 1.15  2005/06/28 14:22:27  yfve7250
	  nouvo fichier build_ws.xml
	  2 nouvelles targets generate_WsdlEJBFromInterface et generate_WsdlPOJOFromInterface
	  on conserve le répertoire skeleton pour pouvoir récuppérer le wsdd

	  Revision 1.14  2005/06/28 13:54:27  beal6226
	  Ajout historique CVS

	  -->
<!DOCTYPE project [
		<!ENTITY setenv SYSTEM "../conf/setenv.xml">
	]>

<project name="build_ws-cxf" default="init" basedir="../..">

	<!-- Chargement des propriétés -->
	&setenv;

    <property file="${ant.modules.dir}/${module.type}.${module.name}.properties" />
	<property name="WSProperties"
	          value="${ant.modules.dir}/${module.type}.${module.name}.properties" />
	<property name="client.mapping"
	          value="${ant.modules.dir}/${module.type}.${module.name}-client-mapping.properties" />
	<property name="server.mapping"
	          value="${ant.modules.dir}/${module.type}.${module.name}-server-mapping.properties" />

	<property name="wsdl.output.fullname"
	          value="${j2ee.dir}/${module.type}/${module.name}${wsdl.output.name}" />


	<property name="target-module.type"  value="war-ws" />
	
	<property name="target-module.dir"  value="${j2ee.dir}/${target-module.type}/${target-module.name}" />



	<!-- CXF task  -->
	<target name="define_cxf">
		<path id="cxf.classpath">
			<fileset dir="./lib/cxf">
				<include name="**/*.jar" />
			</fileset>
		</path>
	</target>

	<!-- TACHE DE GENERATION DES CLASSES JAVA pour l'ensemble des WSDLs du module -->
	<target name="build_ws" depends="init" >



		<!-- Compilation du module -->
		<ant antfile="${ant.conf.dir}/common.xml" target="compile_module">
			<property name="sub.dir" value="WEB-INF/classes" />
		</ant>

		<!-- Copie des fichiers du répertoire j2ee -->
		<ant antfile="${ant.conf.dir}/common.xml" target="copy_j2ee">
			<property name="dest.dir" value="${tmp.dir}/${module.type}/${module.name}/${package.dir}" />
		</ant>

		<!-- Copie des librairies -->
		<ant antfile="${ant.conf.dir}/common.xml" target="copy_lib">
			<property name="dest.dir" value="${tmp.dir}/${module.type}/${module.name}/${package.dir}" />
			<property name="sub.dir" value="WEB-INF/lib" />
		</ant>


	</target>

	
	<!-- TACHE DE GENERATION DES CLASSES JAVA pour l'ensemble des WSDLs du module -->
	<target name="wsdl2server" depends="define_ant-contrib,init" >



		<!--  chargement du fichier de mapping server -->
	    <loadfile
	      property="namespaces.mapping"
	      srcFile="${server.mapping}">
	      <filterchain>
			<!-- supprime les commentaire -->
	      	<striplinecomments >
	      	  <comment value="#"/>
	      	</striplinecomments>

			<!-- supprime les tabs, chaines vide et trim -->
	      	<tokenfilter>
	      	    <deletecharacters chars="\t"/>
	      	    <trim/>
	      	    <ignoreblank/>
	      	</tokenfilter>

	      	<!-- ajoute ' -p ' devant chaque ligne -->
        	<prefixlines  prefix=" -p " />

	      	<!-- concat de toutes les lignes en une seule -->
	        <striplinebreaks />

	      </filterchain>
	    </loadfile>

		<!-- in case property has not been set -->
		<property name="namespaces.mapping" value=" " />		
		
		<foreach  param="WS.wsdl.fullname" target="WS.wsdl2server" delimiter=" " >
			<path>
				<fileset dir="${j2ee.dir}/${module.type}/${module.name}${WS.wsdl.dir}">
					<include name="**/*.wsdl"/>
				</fileset>				
			</path>
		    <param name="namespaces.mapping" value="${namespaces.mapping}" />
		    <param name="module.type" value="${module.type}" />
		    <param name="module.name" value="${module.name}" />
		    <param name="tmp.dir" value="${tmp.dir}" />
		</foreach>



	</target>
	
	
	<!-- TACHE DE GENERATION DES CLASSES JAVA pour l'ensemble des WSDLs du module -->
	<target name="wsdl2client" depends="define_ant-contrib,init" >

		<!--  chargement du fichier de mapping server -->
	    <loadfile
	      property="namespaces.mapping"
	      srcFile="${client.mapping}">
	      <filterchain>
			<!-- supprime les commentaire -->
	      	<striplinecomments >
	      	  <comment value="#"/>
	      	</striplinecomments>

			<!-- supprime les tabs, chaines vide et trim -->
	      	<tokenfilter>
	      	    <deletecharacters chars="\t"/>
	      	    <trim/>
	      	    <ignoreblank/>
	      	</tokenfilter>

	      	<!-- ajoute ' -p ' devant chaque ligne -->
        	<prefixlines  prefix=" -p " />

	      	<!-- concat de toutes les lignes en une seule -->
	        <striplinebreaks />

	      </filterchain>
	    </loadfile>

		<!-- in case property has not been set -->
		<property name="namespaces.mapping" value=" " />		

		<!-- clean au cas ou il y aurait des anciennes classes générées -->
		<delete  dir="${tmp.dir}/${module.type}/${module.name}/src_wsdl2java_client"
		        includeemptydirs="true" failonerror="false" />
		        
		<mkdir dir="${tmp.dir}/${module.type}/${module.name}/src_wsdl2java_client" />



		<foreach  param="WS.wsdl.fullname" target="WS.wsdl2client" delimiter=" " >
			<path>
				<fileset dir="${j2ee.dir}/${module.type}/${module.name}${WS.wsdl.dir}">
					<include name="**/*.wsdl"/>
				</fileset>				
			</path>
		    <param name="namespaces.mapping" value="${namespaces.mapping}" />
		    <param name="module.type" value="${module.type}" />
		    <param name="module.name" value="${module.name}" />
		    <param name="tmp.dir" value="${tmp.dir}" />
		</foreach>
		
	</target>	
	
	
	
	
	<!-- Enchainement de taches de generation de classe d'IMPLEMENTATION pour UN WSDL -->
	
	<target name="WS.wsdl2server">
		
		<delete  dir="${tmp.dir}/${module.type}/${module.name}/src_wsdl2java_server"
		        includeemptydirs="true" failonerror="false" />
		        
		<mkdir dir="${tmp.dir}/${module.type}/${module.name}/src_wsdl2java_server" />
				
		<antcall target="generate_javaclasses" />
		
		<!-- Copie dans generated -->
		<antcall target="copyServerToGenerated" />
		
		<!-- generation d'une class d'implementation -->
		<condition property="DoNotGenerateImpl">
			<equals arg1="${WS.generateServiceImpl}" arg2="false" />
		</condition>
		
		<antcall target="generate_server_impl" />
	</target>

	
	
	
	
	<!-- Enchainement de taches de generation de classe d'un CLIENT pour UN WSDL -->
	
	<target name="WS.wsdl2client" >
		
		<antcall target="generate_client" />
		
		<!-- Copie dans generated -->
		<antcall target="copyClientToGenerated" />
	</target>
	
	
	<!-- TARGET generate_wsdl2java_server -->
	<!-- Génération des fichiers java deploy.wsdd, stub et skeleton à partir du fichier wsdl. 
	
					<arg value="-impl" />
					<arg value="-wsdlLocation" />
					<arg value="${WS.wsdl}" />	

	
	-->
	<target name="generate_javaclasses" depends="define_cxf" description="wsdl2java serveur">
	
	    <echo message="Generation des classes java a partir de ${WS.wsdl.fullname}" />

		<java classname="org.apache.cxf.tools.wsdlto.WSDLToJava" fork="true" jvm="" >
							
					<arg line="-verbose${namespaces.mapping}" />
					<arg value="-d" />
					<arg value="${tmp.dir}/${module.type}/${module.name}/src_wsdl2java_server" />
					<arg value="${WS.wsdl.fullname}" />
					<classpath>
						<path refid="cxf.classpath" />
					</classpath>
				</java>

	</target>


	<target name="generate_server_impl" depends="define_cxf" unless="DoNotGenerateImpl" >
	
	    <echo message="Generation d'une classe d'implementation de ${WS.wsdl.fullname}" />

		<java classname="org.apache.cxf.tools.wsdlto.WSDLToJava" fork="true" jvm="" >							
					<arg line="-verbose -impl${namespaces.mapping}" />
					<arg value="-d" />
					<arg value="${tmp.dir}/${module.type}/${module.name}/src_wsdl2java_server" />
					<arg value="${WS.wsdl.fullname}" />
					<classpath>
						<path refid="cxf.classpath" />
					</classpath>
				</java>
	</target>

	

	<!-- TARGET generate_wsdl2java_client -->
	<!-- Génération des fichiers java deploy.wsdd, stub et skeleton à partir du fichier wsdl. -->
	<target name="generate_client" depends="define_cxf" description="wsdl2java serveur">
		<echo message="Génération des fichiers java client par wsdl2java." />

		<java classname="org.apache.cxf.tools.wsdlto.WSDLToJava" fork="true" >
					<arg line="-verbose -client${namespaces.mapping}" />
					<arg value="-d" />
					<arg value="${tmp.dir}/${module.type}/${module.name}/src_wsdl2java_client" />
					<arg value="${WS.wsdl.fullname}" />
					<classpath>
						<path refid="cxf.classpath" />
					</classpath>
				</java>

	</target>	

	<!-- On recopie les classes generes dans 'generted' -->
	<target name="copyServerToGenerated">
		<echo message="Copie de la couche d'échange dans generated" />
		<copy todir="${generated.dir}" includeEmptyDirs="false">
			<fileset dir="${tmp.dir}/${module.type}/${module.name}/src_wsdl2java_server" >
			</fileset>
		</copy>
	</target>

	<!-- On recopie les classes generes dans 'generted' -->
	<target name="copyClientToGenerated">
		<echo message="Copie de la couche d'échange dans generated" />
		<copy todir="${generated.dir}" includeEmptyDirs="false">
			<fileset dir="${tmp.dir}/${module.type}/${module.name}/src_wsdl2java_client" >
			</fileset>
		</copy>
	</target>
	

	<!-- TARGET package_client -->
	<!-- Compilation et packaging des stubs client des web services à partir
	des fichiers WSDL du projet.
	Génération du fichier jar des classes pour le client web service. -->
	<target name="package_client" depends="init" description="packaging client ws">
		
		  <delete includeEmptyDirs="true">
		    <fileset dir="${tmp.dir}/${module.type}/${module.name}/package_client/classes" includes="**/*"/>
		  </delete>
		

		
		<javac srcdir="${tmp.dir}/${module.type}/${module.name}/src_wsdl2java_client"
		       destdir="${tmp.dir}/${module.type}/${module.name}/package_client/classes"
		       classpathref="project.classpath"
		       debug="on"
		       debuglevel="lines,vars,source"
		       verbose="${verbose}">
		</javac>
		
		
		<copy todir="${tmp.dir}/${module.type}/${module.name}/package_client/classes/wsdl" includeEmptyDirs="false">
			<fileset dir="${j2ee.dir}/${module.type}/${module.name}${WS.wsdl.dir}" >
				<include  name="*.xsd" />
				<include  name="*.wsdl" />
			</fileset>
		</copy>
			
		<jar destfile="${dist.dir}/lib/${module.name}-ws-stub.jar"
		     basedir="${tmp.dir}/${module.type}/${module.name}/package_client/classes">
		</jar>
	</target>	


	<!-- TARGET internet init -->
	<!-- Création des répertoires nécessaires au fonctionnement du toolkit -->
	<target name="init">
		<ant antfile="${ant.conf.dir}/common.xml" target="init" />
		<mkdir dir="${j2ee.dir}/${module.type}/${module.name}/WEB-INF" />
		<mkdir dir="${tmp.dir}/${module.type}/${module.name}/${package.dir}/WEB-INF/classes" />
		<mkdir dir="${tmp.dir}/${module.type}/${module.name}/package_client/classes" />
		<mkdir dir="${tmp.dir}/${module.type}/${module.name}/src_wsdl2java_server" />
		<mkdir dir="${tmp.dir}/${module.type}/${module.name}/src_wsdl2java_client" />
	</target>
	
	
	
	<!-- TARGET package_Pojo -->
	<target name="package_Pojo" depends="init">
		<antcall target="package" />
	</target>

	<!-- TARGET package_Ejb -->
	<target name="package_Ejb" depends="init">
		<antcall target="package" />
	</target>

	<!-- TARGET package -->
	<!-- Génération du fichier war du webservice à partir des classes compilées,
	des librairies à inclure, et des fichiers du répertoire j2ee du module. -->
	<target name="package" depends="init" description="packaging war ws">
		<!-- Construction du war -->
		<echo message="Construction du fichier war ${dist.dir}/${module.type}/${module.name}.war" />
		<tstamp>
			<format property="TODAY" pattern="d-MMM-yyyy hh:mm:ss aa" locale="en" />
		</tstamp>
		<war destfile="${dist.dir}/${module.type}/${module.name}.war"
		     filesetmanifest="merge"
		     webxml="${tmp.dir}/${module.type}/${module.name}/${package.dir}/WEB-INF/web.xml">
			<fileset dir="${tmp.dir}/${module.type}/${module.name}/${package.dir}">
				<exclude name="WEB-INF/web.xml" />
			</fileset>
			<manifest>
				<attribute name="Release-Date" value="${TODAY}" />
				<attribute name="Created-By"
				           value="${java.vm.version} (${java.vm.vendor})" />
				<attribute name="Company" value="France Telecom" />
				<attribute name="Toolkit-Version" value="${toolkit.version}" />
				<attribute name="Module-Name" value="${module.name}" />
			</manifest>
		</war>
		<echo message="========== Packaging du module terminé, consulter ${dist.dir}/${module.type}/${module.name}.war ==========" />
	</target>
	
</project>