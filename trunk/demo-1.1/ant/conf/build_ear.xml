<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- CVS History
  $Log: build_ear.xml,v $
  Revision 1.5  2007/12/20 17:15:14  beal6226
  Adaptation pour Java 1.4 et Eclipse 3.2

  Revision 1.4  2007/12/18 13:13:27  beal6226
  Version G3R2C0

  Revision 1.3  2007/05/24 10:08:21  beal6226
  pause d'une seconde dans le déploiement Jonas
  Ajout d'un depend pour la target jonas_undeploy

  Revision 1.2  2006/11/02 13:54:48  beal6226
  Synchronisation avec referentiel plateforme Eclipse

  Revision 1.1  2006/10/10 08:10:37  ajta5630
  Intérgration dans la barre d'outils et le menu du workbench. Intégration de l'aide

  Revision 1.17  2006/03/15 16:49:55  beal6226
  La variable TODAY doit être définie dans le projet où elle est utilisée. Le timestamp est donc placé devant chaque utilisation de TODAY.
  Ajout d'une description aux tâches les plus utiles pour un accès plus facile avec la vue outline d'Eclipse.
  Ajout de doubles traits dans les messages ant pour bien visualiser la fin de construction de chaque module

  Revision 1.16  2006/02/17 14:52:48  beal6226
  Factorisation de la tâche init

  Revision 1.15  2006/01/24 10:50:08  yrka8220
  Ajout du module rar

  Revision 1.14  2006/01/19 10:36:02  beal6226
  Utilisation de la tâche standard serverdeploy de Jonas et de jonas.server.name

  Revision 1.13  2006/01/18 17:03:49  beal6226
  Utilisation de la tâche standard serverdeploy de Jonas et de jonas.server.name

  Revision 1.12  2005/11/28 15:41:25  yfve7250
  Ajout du serveur websphere

  Revision 1.11  2005/10/25 11:08:00  beal6226
  Ajout d'attributs Manifest sur jar, war, war-ws et ear

  Revision 1.10  2005/09/05 08:56:28  beal6226
  Refonte complète module web services

  Revision 1.9  2005/06/27 09:34:28  beal6226
  Ajour d'un mkdir war-ws dans dist sur les 5 build_xxx car sinon ça plante

  Revision 1.8  2005/06/10 14:17:19  nieh8376
  coorection de scripts

  Revision 1.7  2005/06/01 08:48:23  nieh8376
  *** empty log message ***

  Revision 1.6  2005/05/09 14:38:49  beal6226
  Ajout de filesetmanifest sur jar, war et ear

  Revision 1.5  2005/04/28 17:18:55  beal6226
  Gestion des fichiers class.include et lib.include vide par l'ajout d'un dummy_file

  Revision 1.4  2005/04/28 16:53:22  beal6226
  Gestion des caractères accentués : encoding="ISO-8859-1" dans tous ls fichiers XML

  Revision 1.3  2005/04/28 16:09:00  beal6226
  Refonte complète - Version finalisée modules ejb, lib, war et ear

  -->
<!DOCTYPE project [
		<!ENTITY setenv SYSTEM "../conf/setenv.xml">	
	]>
<project name="build_ear" default="init" basedir="../..">

	<!-- Chargement des propriétés -->
	&setenv;
    <property file="${ant.modules.dir}/${module.type}.${module.name}.properties" />

	<!-- Valeurs par défaut : ant ne fait ces affectations que si les variables ne sont pas définies -->
	<property name="jonas.deploy.dir" value="${jonas.base}/apps" />
	<property name="jonas.deploy.exploded.dir" value="{jonas.base}/apps/autoload" />
	<property name="weblogic.deploy.dir" value="${weblogic.root}/ToolkitDeploy" />
	<property name="weblogic.deploy.exploded.dir" value="${weblogic.deploy.dir}" />

	<!-- ================ PREMIERE PARTIE : MODE EAR ================= -->

	<!-- TARGET package -->
	<!-- Le packaging d'un module ear consiste à copier tous les fichiers J2EE dans le 
	répertoire temporaire du module, en remplaçant les variables du type ${variable} par 
	leur valeur pour les fichiers *.template.*.	Ensuite, on copie les modules et les 
	librairies, et on construit l'ear -->
	<target name="package" depends="init" description="packaging ear">
		<ant antfile="${ant.conf.dir}/common.xml" target="copy_j2ee">
			<property name="dest.dir" value="${tmp.dir}/${module.type}/${module.name}/${package.dir}" />
		</ant>
		<!-- Copie des modules war, jar ejb et rar.
		On recherche les modules dans les répertoires ${dist.dir}/ejb, ${dist.dir}/war et ${dist.dir}/rar correspondant 
		aux modules WAR, EJB et RAR déjà générés -->
		<property name="includesmodules"
		          value="${ant.includes.dir}/${module.type}.${module.name}.module.include" />
		<available file="${includesmodules}"
		           type="file"
		           property="modules.${module.name}.present" />
		<fail unless="modules.${module.name}.present"
		      message="Attention: Le fichier ${includesmodules} n'existe pas. Packaging du projet impossible" />
		<!-- dummy_file est nécessaire pour le cas où le includeslibraries est vide, sinon on copie tout -->
		<copy todir="${tmp.dir}/${module.type}/${module.name}/${package.dir}">
			<fileset dir="${dist.dir}/ejb" includesfile="${includesmodules}" includes="dummy_file" />
			<fileset dir="${dist.dir}/war" includesfile="${includesmodules}" includes="dummy_file" />
			<fileset dir="${dist.dir}/war-ws" includesfile="${includesmodules}" includes="dummy_file" />
			<fileset dir="${dist.dir}/rar" includesfile="${includesmodules}" includes="dummy_file" />
		</copy>

		<!-- Copie des librairies -->
		<ant antfile="${ant.conf.dir}/common.xml" target="copy_lib">
			<property name="dest.dir" value="${tmp.dir}/${module.type}/${module.name}/${package.dir}" />
			<property name="sub.dir" value="lib" />
		</ant>

		<!-- Construction de l'ear -->
		<echo message="Construction du fichier ear ${dist.dir}/${module.type}/${module.name}.ear" />
		<tstamp>
			<format property="TODAY" pattern="d-MMM-yyyy hh:mm:ss aa" locale="en" />
		</tstamp>
		<ear destfile="${dist.dir}/${module.type}/${module.name}.ear"
		     appxml="${tmp.dir}/${module.type}/${module.name}/${package.dir}/META-INF/application.xml"
		     filesetmanifest="merge">
			<fileset dir="${tmp.dir}/${module.type}/${module.name}/${package.dir}">
				<exclude name="META-INF/application.xml" />
			</fileset>
			<manifest>
				<attribute name="Release-Date" value="${TODAY}" />
				<attribute name="Created-By"
				           value="${java.vm.version} (${java.vm.vendor})" />
				<attribute name="Company" value="France Telecom" />
				<attribute name="Toolkit-Version" value="${toolkit.version}" />
				<attribute name="Module-Name" value="${module.name}" />
			</manifest>
		</ear>
		<echo message="========== Packaging du module terminé, consulter ${dist.dir}/${module.type}/${module.name}.ear ==========" />
	</target>

	<!-- TARGET deploy -->
	<!-- On déploie l'ear dans le serveur indiqué par ${server.name}. -->
	<target name="deploy" depends="init" description="deploy ear">
		<antcall target="${server.name}_deploy" />
		<echo message="Déploiement du module ${module.name}.ear sur ${server.name} terminé" />
	</target>

	<!-- TARGET undeploy -->
	<!-- On enlève l'ear du serveur indiqué par ${server.name}. -->
	<target name="undeploy" depends="init">
		<antcall target="${server.name}_undeploy" />
		<echo message="Suppression du module ${module.name}.ear sur ${server.name} terminé" />
	</target>


	<!-- TARGET jonas_deploy -->
	<!-- Copie du fichier dans le répertoire de jonas et lancement du déploiement.
	Jonas ne veut pas déployer une application qui existe déjà. On lance donc
	systématiquement un undeploy avant le deploy -->
	<target name="jonas_deploy" depends="define_jonas" description="déploiement jonas">
		<available file="${jonas.deploy.dir}/${module.name}.ear"
		           type="dir"
		           property="ear.${module.name}.present">
		</available>
		<fail if="ear.${module.name}.present"
		      message="Attention: Un répertoire ${jonas.deploy.dir}/${module.name}.ear existe déjà. Création d'un fichier impossible" />

		<copy file="${dist.dir}/${module.type}/${module.name}.ear"
		      todir="${jonas.deploy.dir}"
		      overwrite="true" verbose="${verbose}"/>
		<!--path id="deploy.classpath">
			<fileset dir="${jonas.root}">
				<include name="lib/common/ow_jonas_bootstrap.jar" />
			</fileset>
			<fileset dir="${java.home}">
				<include name="/lib/tools.jar" />
				<include name="/jre/lib/rt.jar" />
			</fileset>
		</path-->
		<echo message="undeploy de l'ancienne version - Ne pas tenir compte du message d'erreur si l'ear n'était pas deployé" />
		<jonas-serverdeploy action="undeploy"
		              source="${jonas.deploy.dir}/${module.name}.ear">
			<jonas jonasRoot="${jonas.root}"
			       jonasBase="${jonas.base}"
			       servername="${jonas.server.name}">
			</jonas>
		</jonas-serverdeploy>
		<!-- Pause car il y a un bug Jonas si le undeploy/deploy est trop rapide sur certains PC puissants -->
		<sleep seconds="2" />
		<!--java classname="org.objectweb.jonas.server.Bootstrap"
			      fork="true"
			      classpathref="deploy.classpath">
				<arg value="org.objectweb.jonas.adm.JonasAdmin" />
				<arg value="-r" />
				<arg value="${jonas.base}/apps/${module.name}.ear" />
				<jvmarg value="-Dinstall.root=${jonas.root}" />
				<jvmarg value="-Djonas.base=${jonas.base}" />
				<jvmarg value="-Djava.security.policy=${jonas.base}/conf/java.policy" />
				<jvmarg value="-Djonas.classpath=" />
				<jvmarg value="-Djonas.default.classloader=true" />
				<jvmarg value="-Djavax.rmi.CORBA.PortableRemoteObjectClass=org.objectweb.carol.rmi.multi.MultiPRODelegate" />
				<jvmarg value="-Djava.naming.factory.initial=org.objectweb.carol.jndi.spi.MultiOrbInitialContextFactory" />
				<jvmarg value="-Djava.security.auth.login.config=${jonas.root}/conf/jaas.config" />
				<jvmarg value="-Djava.rmi.server.RMIClassLoaderSpi=org.objectweb.jonas.server.RemoteClassLoaderSpi" />
			</java-->
		<echo message="deploy de la nouvelle version" />
		<jonas-serverdeploy action="deploy"
		              source="${jonas.deploy.dir}/${module.name}.ear">
			<jonas jonasRoot="${jonas.root}"
			       jonasBase="${jonas.base}"
			       serverName="${jonas.server.name}">
			</jonas>
		</jonas-serverdeploy>
		<!--java classname="org.objectweb.jonas.server.Bootstrap"
		      fork="true"
		      classpathref="deploy.classpath">
			<arg value="org.objectweb.jonas.adm.JonasAdmin" />
			<arg value="-a" />
			<arg value="${jonas.base}/apps/${module.name}.ear" />
			<jvmarg value="-Dinstall.root=${jonas.root}" />
			<jvmarg value="-Djonas.base=${jonas.base}" />
			<jvmarg value="-Djava.security.policy=${jonas.base}/conf/java.policy" />
			<jvmarg value="-Djonas.classpath=" />
			<jvmarg value="-Djonas.default.classloader=true" />
			<jvmarg value="-Djavax.rmi.CORBA.PortableRemoteObjectClass=org.objectweb.carol.rmi.multi.MultiPRODelegate" />
			<jvmarg value="-Djava.naming.factory.initial=org.objectweb.carol.jndi.spi.MultiOrbInitialContextFactory" />
			<jvmarg value="-Djava.security.auth.login.config=${jonas.root}/conf/jaas.config" />
			<jvmarg value="-Djava.rmi.server.RMIClassLoaderSpi=org.objectweb.jonas.server.RemoteClassLoaderSpi" />
		</java-->
	</target>

	<!-- TARGET jonas_undeploy -->
	<!-- Suppression de l'application sur Jonas -->
	<target name="jonas_undeploy" depends="define_jonas">
		<jonas-serverdeploy action="undeploy"
		              source="${jonas.deploy.dir}/${module.name}.ear">
			<jonas jonasRoot="${jonas.root}"
			       jonasBase="${jonas.base}"
			       servername="${jonas.server.name}">
			</jonas>
		</jonas-serverdeploy>
	</target>

	<!-- TARGET weblogic_deploy -->
	<!-- Copie du fichier dans le répertoire de weblogic et lancement du déploiement.
	Weblogic accepte de déployer une application qui existe déjà. -->
	<!-- NB : Si on déploie plusieurs applications au sein du même script ant, une
	pile d'exceptions est générée par weblogic (DeploymentNotificationCallback,
	ClassCastException) à partir du deuxième déploiement. Ceci n'est cependant pas
	bloquante puisque l'application est malgré tout correctement déployée -->
	<target name="weblogic_deploy" depends="define_weblogic" description="déploiement weblogic">
		<available file="${weblogic.deploy.dir}/${module.name}.ear"
		           type="dir"
		           property="ear.${module.name}.present">
		</available>
		<fail if="ear.${module.name}.present"
		      message="Attention: Un répertoire ${weblogic.deploy.dir}/${module.name}.ear existe déjà. Création d'un fichier impossible" />

		<copy file="${dist.dir}/${module.type}/${module.name}.ear"
		      todir="${weblogic.deploy.dir}"
		      overwrite="true" />
		<wldeploy action="deploy"
		          source="${weblogic.deploy.dir}/${module.name}.ear"
		          name="${module.name}"
		          user="${weblogic.user}"
		          password="${weblogic.password}"
		          verbose="true"
		          adminurl="${weblogic.adminurl}"
		          debug="true"
		          targets="${weblogic.servers.name}" />
	</target>

	<!-- TARGET weblogic_undeploy -->
	<!-- A priori inutile -->
	<target name="weblogic_undeploy" depends="define_weblogic">
		<wldeploy action="undeploy"
		          name="${module.name}"
		          user="${weblogic.user}"
		          password="${weblogic.password}"
		          verbose="true"
		          adminurl="${weblogic.adminurl}"
		          debug="true"
		          targets="${weblogic.servers.name}"
		          failonerror="false" />
	</target>

	<!-- TARGET websphere_deploy -->
	<!-- Rien à faire, websphere n'est pas installé en local -->
	<target name="websphere_deploy">
	</target>

	<!-- TARGET websphere_undeploy -->
	<!-- Rien à faire, websphere n'est pas installé en local -->
	<target name="websphere_undeploy">
	</target>

	<!-- ================ DEUXIEME PARTIE : MODE EXPLODED ================= -->
	<!-- TARGET package_exploded -->
	<target name="package_exploded" depends="define_ant-contrib" description="packaging de l'ear sous forme d'arborescence">
		<propertycopy name="dest.server.name" from="${server.name}.deploy.exploded.dir"/>

		<available file="${dest.server.name}/${module.name}.ear"
		           type="file"
		           property="ear.${module.name}.present">
		</available>
		<fail if="ear.${module.name}.present"
		      message="Attention: Un fichier ${dest.server.name}/${module.name}.ear existe déjà. Création d'un répertoire impossible" />

		<!-- Copy du dossier j2ee -->
		<ant antfile="${ant.conf.dir}/common.xml" target="copy_j2ee">
			<property name="dest.dir" value="${dest.server.name}/${module.name}.ear" />
		</ant>
		<!-- En cas de déploiement à chaud : Weblogic recherche un fichier REDEPLOY dans META-INF -->
		<touch file="${dest.server.name}/${module.name}.ear/META-INF/REDEPLOY" />

		<!-- Copie des modules rar et ejb.
		On recherche les modules dans les répertoires ${dist.dir}/rar et ${dist.dir}/ejb correspondant 
		aux modules RAR déjà générés -->
		<property name="includesmodules"
		          value="${ant.includes.dir}/${module.type}.${module.name}.module.include" />
		<available file="${includesmodules}"
		           type="file"
		           property="modules.${module.name}.present" />
		<fail unless="modules.${module.name}.present"
		      message="Attention: Le fichier ${includesmodules} n'existe pas. Packaging du projet impossible" />
		<!-- dummy_file est nécessaire pour le cas où le includeslibraries est vide, sinon on copie tout -->
		<copy todir="${dest.server.name}/${module.name}.ear">
			<fileset dir="${dist.dir}/rar" includesfile="${includesmodules}" includes="dummy_file" />
			<fileset dir="${dist.dir}/ejb" includesfile="${includesmodules}" includes="dummy_file" />
		</copy>

		<!-- Copie des modules war et war-ws en exploded (utilisation de ant-contrib) -->

		<property file="${ant.includes.dir}/${module.type}.${module.name}.module.include" prefix="lst_module" />
		<propertyselector property="module_war.list"
		                         delimiter=","
		                         match="lst_module.(.*)\.war"
		                         select="\1"
		                         casesensitive="true" />

		<foreach list="${module_war.list}"
	                delimiter=","
	                target="copy.module_war"
	    			inheritall="true"
	                param="module_war.id" />

		<!-- Copie des librairies -->
		<ant antfile="${ant.conf.dir}/common.xml" target="copy_lib">
			<property name="dest.dir" value="${dest.server.name}/${module.name}.ear" />
			<property name="sub.dir" value="lib" />
		</ant>

		<echo message="========== Packaging exploded du module terminé, consulter ${dest.server.name}/${module.name}.ear ==========" />

	</target>

	<target name="copy.module_war">
		<copy failonerror="false" todir="${dest.server.name}/${module.name}.ear/${module_war.id}.war" includeemptydirs="true">
			<fileset dir="${tmp.dir}/war/${module_war.id}/package_server" />
			<fileset dir="${tmp.dir}/war-ws/${module_war.id}/package_server" />
		</copy>
	</target>

	<!-- TARGET deploy_exploded -->
	<!-- On déploie l'arborescence dans le serveur indiqué par ${server.name}. -->
	<target name="deploy_exploded" depends="init" description="deploy exploded application">
		<antcall target="${server.name}_deploy_exploded" />
		<echo message="Déploiement exploded du module ${module.name}.ear sur ${server.name} terminé" />
	</target>

	<!-- TARGET undeploy_exploded -->
	<!-- On enlève l'arborescence dans le serveur indiqué par ${server.name}. -->
	<target name="undeploy_exploded" depends="init">
		<antcall target="${server.name}_undeploy_exploded" />
		<echo message="Suppression du module ${module.name}.ear sur ${server.name} terminé" />
	</target>


	<!-- TARGET jonas_deploy_exploded -->
	<!-- On déploie directement l'arborescence exploded sous tmp dans Jonas -->
	<!-- On fait un undeploy auparavant car Jonas ne supporte pas les redéploiements -->
	<target name="jonas_deploy_exploded" depends="define_jonas" description="déploiement à chaud jonas">
		<echo message="undeploy de l'ancienne version - Ne pas tenir compte du message d'erreur si l'ear n'était pas deployé" />
		<jonas-serverdeploy action="undeploy"
		              source="${jonas.deploy.exploded.dir}/${module.name}.ear">
			<jonas jonasRoot="${jonas.root}"
			       jonasBase="${jonas.base}"
			       servername="${jonas.server.name}">
			</jonas>
		</jonas-serverdeploy>
		<echo message="deploiement de la nouvelle version." />
		<jonas-serverdeploy action="deploy"
		              source="${jonas.deploy.exploded.dir}/${module.name}.ear">
			<jonas jonasRoot="${jonas.root}"
			       jonasBase="${jonas.base}"
			       serverName="${jonas.server.name}">
			</jonas>
		</jonas-serverdeploy>
	</target>

	<!-- TARGET jonas_undeploy_exploded -->
	<!-- Suppression de l'application sur Jonas -->
	<target name="jonas_undeploy_exploded" depends="define_jonas">
		<echo message="undeploy de la nouvelle version" />
		<jonas-serverdeploy action="undeploy"
		              source="${jonas.deploy.exploded.dir}/${module.name}.ear">
			<jonas jonasRoot="${jonas.root}"
			       jonasBase="${jonas.base}"
			       servername="${jonas.server.name}">
			</jonas>
		</jonas-serverdeploy>
	</target>

	<!-- TARGET weblogic_deploy_exploded -->
	<!-- On déploie ou redéploie directement l'arborescence exploded dans Weblogic -->
	<target name="weblogic_deploy_exploded" depends="define_weblogic" description="déploiement weblogic">
		<echo message="deploiement ou redéploiement de la nouvelle version." />
		<wldeploy action="deploy"
		          source="${weblogic.deploy.exploded.dir}/${module.name}.ear"
		          name="${module.name}"
		          user="${weblogic.user}"
		          password="${weblogic.password}"
		          verbose="true"
		          adminurl="${weblogic.adminurl}"
		          debug="true"
		          targets="${weblogic.servers.name}" />
	</target>

	<!-- TARGET weblogic_undeploy_exploded -->
	<!-- A priori inutile -->
	<target name="weblogic_undeploy_exploded" depends="define_weblogic">
		<wldeploy action="undeploy"
		          name="${module.name}"
		          user="${weblogic.user}"
		          password="${weblogic.password}"
		          verbose="true"
		          adminurl="${weblogic.adminurl}"
		          debug="true"
		          targets="${weblogic.servers.name}"
		          failonerror="false" />
	</target>

	<!-- TARGET websphere_deploy_exploded -->
	<!-- Rien à faire, websphere n'est pas installé en local -->
	<target name="websphere_deploy_exploded">
	</target>

	<!-- TARGET websphere_undeploy_exploded -->
	<!-- Rien à faire, websphere n'est pas installé en local -->
	<target name="websphere_undeploy_exploded">
	</target>


	<!-- TARGET internet init -->
	<!-- Création des répertoires nécessaires au fonctionnement du toolkit -->
	<target name="init">
		<ant antfile="${ant.conf.dir}/common.xml" target="init" />
	</target>

</project>