<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- CVS History
	  $Log: report_junit.xml,v $
	  Revision 1.1  2007/10/24 12:40:34  tvzl8571
	  *** empty log message ***
	
	  Revision 1.1  2007/10/22 08:05:26  tvzl8571
	  *** empty log message ***
	
	  Revision 1.1  2007/08/13 16:08:57  tvzl8571
	  Tatami Projet.
	
	  Revision 1.2  2007/08/10 12:16:07  beal6226
	  Modif pour permettre la compilation de jar GWT avec les sources
	
	  Revision 1.1  2007/05/25 12:27:21  beal6226
	  Exemple d'utilisation de GWT avec :
	  - Un menu déroulant qui fait apparaitre une popup
	  - Un bouton qui fait apparaitre un hello world
	  - Des champs de saisie qui modifient dynamiquement un tableau de données.
	  - Une utilisation de GWT RPC pour récupérer des données côté serveur (après, c'est bouchonné, il n'y a pas de SGBD).
	
	  Revision 1.2  2006/11/02 13:54:48  beal6226
	  Synchronisation avec referentiel plateforme Eclipse
	
	  Revision 1.1  2006/10/10 08:10:37  ajta5630
	  Intérgration dans la barre d'outils et le menu du workbench. Intégration de l'aide
	
	  Revision 1.1  2006/03/20 16:31:35  beal6226
	  Initial plugin version
	
	  Revision 1.7  2006/03/17 11:27:52  beal6226
	  Recopie des fichiers non java présents dans le test.include, juste après la compilation
	  Exclusion des fichiers CVS
	
	  Revision 1.6  2006/03/15 16:49:55  beal6226
	  La variable TODAY doit être définie dans le projet où elle est utilisée. Le timestamp est donc placé devant chaque utilisation de TODAY.
	  Ajout d'une description aux tâches les plus utiles pour un accès plus facile avec la vue outline d'Eclipse.
	  Ajout de doubles traits dans les messages ant pour bien visualiser la fin de construction de chaque module
	
	  Revision 1.5  2006/03/14 16:57:01  beal6226
	  Nouvelle version de PMD et des règles Clara, directement dans les librairies du toolkit.
	  Attention, sur le palier S2D2, supprimer les anciens fichiers PMD dans Window/Preferences/Ant/Runtime
	
	  Revision 1.4  2006/01/25 10:16:53  beal6226
	  Ajout répertoire src dans le path de compilation javac
	
	  Revision 1.3  2005/10/03 14:27:28  beal6226
	  Compilation java en mode debug
	
	  Revision 1.2  2005/06/28 12:31:55  beal6226
	  Le fichier test.include est rendu facultatif
	
	  Revision 1.1  2005/05/26 12:14:34  beal6226
	  Ajout de tâches de reporting : javadoc, tests junit, PMD
	

	  Revision 1.3  2005/05/23 14:21:02  beal6226
	  Formattage
	
	  Revision 1.2  2005/05/23 14:16:47  beal6226
	  Génération du rapport de test dans dist/reports/test
	
	  Revision 1.1  2005/05/20 15:56:30  beal6226
	  Ajout des tests junit
	  
-->
<!DOCTYPE project [
		<!ENTITY setenv SYSTEM "../conf/setenv.xml">	
	]>
<project name="test_junit" default="init" basedir="../..">

	<!-- Chargement des propriétés -->
	&setenv;
    <property file="${ant.modules.dir}/${module.type}.${module.name}.properties" />

	<!-- TARGET test -->
	<target name="test" depends="init">
		<!-- Les sources à inclure sont recherchés par cette propriété -->
		<property name="includestestfiles"
		          value="${ant.includes.dir}/${module.type}.${module.name}.test.include" />
		<available file="${includestestfiles}"
		           type="file"
		           property="test.${module.name}.present" />
		<!-- junit ne sera lancé que si le fichier ${includestestfiles} existe -->
		<antcall target="verif_test" />
		<antcall target="compile_test" />
		<antcall target="run_test" />
	</target>

	<target name="verif_test" unless="test.${module.name}.present">
		<echo message="Attention: Le fichier ${includestestfiles} n'existe pas. Aucun test junit sur ce projet" />
	</target>

	<!-- TARGET compile_test -->
	<!-- On compile tous les fichiers de test du module dans le répertoire temporaire qui se trouve 
	sous ${tmp.dir}/${module.type}/${module.name}/test-classes. Ce répertoire est différent de
	celui d'Eclipse pour éviter les interférences et permettre d'utiliser éventuellement
	un autre JDK. -->
	<target name="compile_test" if="test.${module.name}.present">
		<echo message="compilation des tests du module: ${module.name}" />

		<!-- dummy_file est nécessaire pour le cas où le includesfiles est vide, sinon javac prend tout src -->
		<javac srcdir="${src.dir}:${test.dir}"
		       destdir="${tmp.dir}/${module.type}/${module.name}/test-classes"
		       includesfile="${includestestfiles}"
		       includes="dummy_file"
		       excludes="**/CVS/**,**/cvs/**"
		       classpathref="test.classpath"
		       includeantruntime="no"
		       debug="on"
		       verbose="${verbose}" />
		<!-- On recopie les fichiers non java, comme le ferait Eclipse.
	    On utilise le fichier includesfiles sans les fichiers java. dummy_file est nécessaire si
	    le includesfile est vide -->
		<copy todir="${tmp.dir}/${module.type}/${module.name}/test-classes">
			<fileset dir="${src.dir}"
			         includesfile="${includestestfiles}"
			         includes="dummy_file"
			         excludes="**/CVS/**,**/cvs/**,**/*.java" />
			<fileset dir="${test.dir}"
			         includesfile="${includestestfiles}"
			         includes="dummy_file"
			         excludes="**/CVS/**,**/cvs/**,**/*.java" />
		</copy>

	</target>

	<target name="run_test"
	        if="test.${module.name}.present"
	        depends="define_junit">
		<echo message="Execution des tests du module: ${module.name}" />

		<!-- fork=true ainsi que la jvmarg "gwt.args" sont nécessaires pour GWT. Ils ne gênent pas les autres tests junit -->
		<junit errorproperty="test.failed" failureproperty="test.failed" fork="true">
			<jvmarg value="-Dgwt.args=-out ${tmp.dir}/${module.type}/${module.name}/www-test" />
			<classpath refid="test.classpath" />
			<formatter usefile="false" type="plain" />
			<batchtest todir="${tmp.dir}/${module.type}/${module.name}/test-results">
				<!-- dummy_file est nécessaire pour le cas où le includesfiles est vide, sinon 
				junit prend tout src/test -->
				<fileset dir="${test.dir}"
				         includes="dummy_file"
				         includesfile="${includestestfiles}" />
				<formatter usefile="true" type="xml" />
			</batchtest>
		</junit>

		<fail message="Tests du module ${module.name} KO" if="test.failed" />

	</target>

	<!-- TARGET report -->
	<target name="report"
	        description="Generation du rapport HTML d'execution des tests unitaires">
		<echo message="Generation du rapport de test format HTML" />
		<junitreport todir="${tmp.dir}">
			<report format="frames" todir="${dist.dir}/reports/test" />
			<fileset dir="${tmp.dir}">
				<include name="**/test-results/TEST-*.xml" />
			</fileset>
		</junitreport>
	</target>


	<!-- TARGET internet init -->
	<target name="init">
		<fail unless="module.name"
		      message="Utiliser le fichier build.xml ou l'un des fichiers sous modules" />
		<!-- Création des répertoires nécessaires au fonctionnement des tests -->
		<mkdir dir="${tmp.dir}/${module.type}/${module.name}/test-classes" />
		<mkdir dir="${tmp.dir}/${module.type}/${module.name}/test-results" />
		<mkdir dir="${dist.dir}/reports/test" />
	</target>

</project>