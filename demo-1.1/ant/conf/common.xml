<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- CVS History
  $Log: common.xml,v $
  Revision 1.3  2007/12/18 13:13:27  beal6226
  Version G3R2C0

  Revision 1.3  2007/12/11 10:23:55  beal6226
  Synchronisation avec le toolkit G3R2

  Revision 1.5  2007/08/13 12:24:28  beal6226
  compilation GWT en obfuscated

  Revision 1.4  2007/08/10 14:02:56  beal6226
  module lib et pas jar pour gwt

  Revision 1.3  2007/08/10 12:16:07  beal6226
  Modif pour permettre la compilation de jar GWT avec les sources

  Revision 1.2  2007/05/25 16:44:03  beal6226
  Chemin absolu pour le destdir de gwtcompile

  Revision 1.1  2007/05/25 12:27:21  beal6226
  Exemple d'utilisation de GWT avec :
  - Un menu déroulant qui fait apparaitre une popup
  - Un bouton qui fait apparaitre un hello world
  - Des champs de saisie qui modifient dynamiquement un tableau de données.
  - Une utilisation de GWT RPC pour récupérer des données côté serveur (après, c'est bouchonné, il n'y a pas de SGBD).

  Revision 1.28  2006/03/17 11:28:37  beal6226
  Exclusion des fichiers CVS et recopie des fichiers non java de generated

  Revision 1.27  2006/03/15 16:49:55  beal6226
  La variable TODAY doit être définie dans le projet où elle est utilisée. Le timestamp est donc placé devant chaque utilisation de TODAY.
  Ajout d'une description aux tâches les plus utiles pour un accès plus facile avec la vue outline d'Eclipse.
  Ajout de doubles traits dans les messages ant pour bien visualiser la fin de construction de chaque module

  Revision 1.26  2006/03/01 16:58:38  beal6226
  Ajout d'un dummy_file lors de la copie après javac pour gérer le cas du includesfile vide

  Revision 1.25  2006/02/23 17:12:40  beal6226
  Regroupement des classpath et réorganisation des librairies dans lib

  Revision 1.24  2006/02/20 09:15:18  beal6226
  Pas de répertoire META-INF partout

  Revision 1.23  2006/02/17 14:52:48  beal6226
  Factorisation de la tâche init

  Revision 1.22  2005/12/15 15:31:21  beal6226
  Suppression des fichiers de déploiement qui ne correspondent pas au serveur d'application en cours

  Revision 1.21  2005/12/06 13:10:56  beal6226
  Messages

  Revision 1.20  2005/11/09 17:09:19  beal6226
  Correction d'une erreur : il manquait l'affectation de output.dir dans la tâche compile

  Revision 1.19  2005/10/25 11:12:52  beal6226
  Commentaires

  Revision 1.18  2005/10/25 10:59:49  beal6226
  Ajout de l'enhancement JDO pour les projets ayant un fichier versant.properties défini dans env.properties

  Revision 1.17  2005/10/25 10:56:02  beal6226
  Recopie des fichiers non java présents dans src et indiqués dans module_type.module_name.class.include
  juste après la compilation, comme le fait Eclipse

  Revision 1.16  2005/10/03 14:27:28  beal6226
  Compilation java en mode debug

  Revision 1.15  2005/09/16 08:29:19  beal6226
  Copie du répertoire J2EE en deux étapes : D'abord common puis le projet

  Revision 1.14  2005/09/05 08:56:28  beal6226
  Refonte complète module web services

  Revision 1.13  2005/06/28 13:32:07  beal6226
  Le fichier de propriété d'un module est rendu facultatif

  Revision 1.12  2005/06/28 12:44:08  beal6226
  Xdoclet est rendu facultatif, il n'est pas utilisé si le fichier d'include n'existe pas

  Revision 1.11  2005/06/27 08:40:01  beal6226
  Ajout mkdir sur generated

  Revision 1.10  2005/06/27 07:55:45  beal6226
  Compilation des sources EJB + XDoclet en une seule passe à cause de dépendances possibles

  Revision 1.9  2005/06/10 14:17:19  nieh8376
  coorection de scripts

  Revision 1.8  2005/05/31 07:57:03  nieh8376
  ajout du module web services

  Revision 1.7  2005/05/20 13:56:40  beal6226
  Ajout des tests junit

  Revision 1.6  2005/04/28 17:18:55  beal6226
  Gestion des fichiers class.include et lib.include vide par l'ajout d'un dummy_file

  Revision 1.5  2005/04/28 16:09:00  beal6226
  Refonte complète - Version finalisée modules ejb, lib, war et ear

  -->
<!DOCTYPE project [
	<!ENTITY setenv SYSTEM "../conf/setenv.xml">
]>
<project name="common" default="compile_module" basedir="../..">
	&setenv;

	<!-- TARGET copy_j2ee -->
	<!-- On recopie tous les fichiers du module présents dans le répertoire j2ee vers
	le répertoire destination, sauf les fichiers templates et les fichiers spécifiques
	au serveur d'application.
	 -->
	<target name="copy_j2ee">
		<echo message="Copie des fichiers de ${j2ee.dir}/${module.type}/${module.name}" />
		<!-- Copie du fichier de propriétés du projet, et création s'il n'existe pas -->
		<copy file="${ant.modules.dir}/${module.type}.${module.name}.properties"
		      tofile="${tmp.dir}/${module.type}/${module.name}/${module.name}.arobase"
			failonerror="false" verbose="${verbose}"/>
		<mkdir dir="${tmp.dir}/${module.type}/${module.name}" />
		<touch file="${tmp.dir}/${module.type}/${module.name}/${module.name}.arobase" />

		<!-- Copie conditionnelle suivant le serveur d'application en cours -->
		<condition property="is.jonas">
			<equals arg1="${server.name}" arg2="jonas" />
		</condition>
		<condition property="is.weblogic">
			<equals arg1="${server.name}" arg2="weblogic" />
		</condition>
		<condition property="is.websphere">
			<equals arg1="${server.name}" arg2="websphere" />
		</condition>
		<antcall target="copy_jonas" />
		<antcall target="copy_weblogic" />
		<antcall target="copy_websphere" />
	</target>


	<!-- TARGETs conditionnelles -->
	<target name="copy_jonas" if="is.jonas">
		<!-- Copie de tous les fichiers J2EE du module common, puis du module en cours,
		dans le répertoire destination -->
		<copy todir="${dest.dir}" failonerror="false" verbose="${verbose}" >
			<fileset dir="${j2ee.dir}/${module.type}/common">
				<exclude name="**/*.template.*" />
				<exclude name="**/weblogic*" />
				<exclude name="**/ibm*" />
			</fileset>
		</copy>
		<copy todir="${dest.dir}" verbose="${verbose}">
			<fileset dir="${j2ee.dir}/${module.type}/${module.name}">
				<exclude name="**/*.template.*" />
				<exclude name="**/weblogic*" />
				<exclude name="**/ibm*" />
			</fileset>
		</copy>

		<!-- On remplace, dans les fichiers *.template.*, les tokens du type @variable@
		par leur véritable valeur, trouvée dans le fichier de propriétés du projet. Cette
		substitution s'avère intéressante dans le cas où on	déploie vers des environnements
		différents, ou dans le cas des web services, car il suffit alors de modifier ces
		variables dans le fichier de propriété.
		-->
		<!-- Remplacement des variables sous la forme @variable@ dans tous les fichiers
		de la forme *.template.* présents dans le répertoire j2ee. En même temps,
		renommage des fichiers en supprimant .template -->
		<copy todir="${dest.dir}" failonerror="false" verbose="${verbose}">
			<fileset dir="${j2ee.dir}/${module.type}/common">
				<include name="**/*.template.*" />
				<exclude name="**/weblogic*" />
				<exclude name="**/ibm*" />
			</fileset>
			<filterset>
				<filtersfile file="${tmp.dir}/${module.type}/${module.name}/${module.name}.arobase" />
			</filterset>
			<mapper type="regexp" from="^(.*)\.template\.(.*)$$" to="\1.\2" />
		</copy>
		<copy todir="${dest.dir}" verbose="${verbose}">
			<fileset dir="${j2ee.dir}/${module.type}/${module.name}">
				<include name="**/*.template.*" />
				<exclude name="**/weblogic*" />
				<exclude name="**/ibm*" />
			</fileset>
			<filterset>
				<filtersfile file="${tmp.dir}/${module.type}/${module.name}/${module.name}.arobase" />
			</filterset>
			<mapper type="regexp" from="^(.*)\.template\.(.*)$$" to="\1.\2" />
		</copy>
	</target>

	<target name="copy_weblogic" if="is.weblogic">
		<!-- Copie de tous les fichiers J2EE du module common, puis du module en cours,
		dans le répertoire destination -->
		<copy todir="${dest.dir}" failonerror="false" verbose="${verbose}" >
			<fileset dir="${j2ee.dir}/${module.type}/common">
				<exclude name="**/*.template.*" />
				<exclude name="**/jonas*" />
				<exclude name="**/ibm*" />
			</fileset>
		</copy>
		<copy todir="${dest.dir}" verbose="${verbose}">
			<fileset dir="${j2ee.dir}/${module.type}/${module.name}">
				<exclude name="**/*.template.*" />
				<exclude name="**/jonas*" />
				<exclude name="**/ibm*" />
			</fileset>
		</copy>

		<!-- On remplace, dans les fichiers *.template.*, les tokens du type @variable@
		par leur véritable valeur, trouvée dans le fichier de propriétés du projet. Cette
		substitution s'avère intéressante dans le cas où on	déploie vers des environnements
		différents, ou dans le cas des web services, car il suffit alors de modifier ces
		variables dans le fichier de propriété.
		-->
		<!-- Remplacement des variables sous la forme @variable@ dans tous les fichiers
		de la forme *.template.* présents dans le répertoire j2ee. En même temps,
		renommage des fichiers en supprimant .template -->
		<copy todir="${dest.dir}" failonerror="false" verbose="${verbose}">
			<fileset dir="${j2ee.dir}/${module.type}/common">
				<include name="**/*.template.*" />
				<exclude name="**/jonas*" />
				<exclude name="**/ibm*" />
			</fileset>
			<filterset>
				<filtersfile file="${tmp.dir}/${module.type}/${module.name}/${module.name}.arobase" />
			</filterset>
			<mapper type="regexp" from="^(.*)\.template\.(.*)$$" to="\1.\2" />
		</copy>
		<copy todir="${dest.dir}" verbose="${verbose}">
			<fileset dir="${j2ee.dir}/${module.type}/${module.name}">
				<include name="**/*.template.*" />
				<exclude name="**/jonas*" />
				<exclude name="**/ibm*" />
			</fileset>
			<filterset>
				<filtersfile file="${tmp.dir}/${module.type}/${module.name}/${module.name}.arobase" />
			</filterset>
			<mapper type="regexp" from="^(.*)\.template\.(.*)$$" to="\1.\2" />
		</copy>
	</target>
	<target name="copy_websphere" if="is.websphere">
		<!-- Copie de tous les fichiers J2EE du module common, puis du module en cours,
		dans le répertoire destination -->
		<copy todir="${dest.dir}" failonerror="false" verbose="${verbose}" >
			<fileset dir="${j2ee.dir}/${module.type}/common">
				<exclude name="**/*.template.*" />
				<exclude name="**/weblogic*" />
				<exclude name="**/jonas*" />
			</fileset>
		</copy>
		<copy todir="${dest.dir}" verbose="${verbose}">
			<fileset dir="${j2ee.dir}/${module.type}/${module.name}">
				<exclude name="**/*.template.*" />
				<exclude name="**/weblogic*" />
				<exclude name="**/jonas*" />
			</fileset>
		</copy>

		<!-- On remplace, dans les fichiers *.template.*, les tokens du type @variable@
		par leur véritable valeur, trouvée dans le fichier de propriétés du projet. Cette
		substitution s'avère intéressante dans le cas où on	déploie vers des environnements
		différents, ou dans le cas des web services, car il suffit alors de modifier ces
		variables dans le fichier de propriété.
		-->
		<!-- Remplacement des variables sous la forme @variable@ dans tous les fichiers
		de la forme *.template.* présents dans le répertoire j2ee. En même temps,
		renommage des fichiers en supprimant .template -->
		<copy todir="${dest.dir}" failonerror="false" verbose="${verbose}">
			<fileset dir="${j2ee.dir}/${module.type}/common">
				<include name="**/*.template.*" />
				<exclude name="**/weblogic*" />
				<exclude name="**/jonas*" />
			</fileset>
			<filterset>
				<filtersfile file="${tmp.dir}/${module.type}/${module.name}/${module.name}.arobase" />
			</filterset>
			<mapper type="regexp" from="^(.*)\.template\.(.*)$$" to="\1.\2" />
		</copy>
		<copy todir="${dest.dir}" verbose="${verbose}">
			<fileset dir="${j2ee.dir}/${module.type}/${module.name}">
				<include name="**/*.template.*" />
				<exclude name="**/weblogic*" />
				<exclude name="**/jonas*" />
			</fileset>
			<filterset>
				<filtersfile file="${tmp.dir}/${module.type}/${module.name}/${module.name}.arobase" />
			</filterset>
			<mapper type="regexp" from="^(.*)\.template\.(.*)$$" to="\1.\2" />
		</copy>
	</target>

	<!-- TARGET copy_lib -->
	<!-- Copie des librairies :
	On recherche les librairies dans le répertoire ${lib.dir} du projet, mais aussi
	dans le répertoire ${dist.dir}/lib correspondant aux modules LIB déjà générés -->
	<target name="copy_lib">
		<property name="includeslibraries"
		          value="${ant.includes.dir}/${module.type}.${module.name}.lib.include" />
		<available file="${includeslibraries}"
		           type="file"
		           property="libraries.${module.name}.present" />
		<antcall target="verif_copy_lib" />
		<antcall target="do_copy_lib" />
	</target>

	<!-- TARGET verif_copy_lib -->
	<!-- Affichage d'un message si le fichier include.lib n'existe pas. -->
	<target name="verif_copy_lib" unless="libraries.${module.name}.present">
		<echo message="Le fichier ${includeslibraries} n'existe pas. Aucune librairie copiée" />
	</target>

	<!-- TARGET do_copy_lib -->
	<!-- Copie si le fichier include.lib existe. -->
	<target name="do_copy_lib" if="libraries.${module.name}.present">
		<echo message="Copie des librairies listées dans ${module.type}.${module.name}.lib.include" />
		<!-- dummy_file est nécessaire pour le cas où le includeslibraries est vide, sinon on copie tout -->
		<!-- flatten permet d'ignorer l'arborescence en entrée et de tout placer dans WEB-INF/lib ou dans lib pour les ejb -->
		<copy todir="${dest.dir}/${sub.dir}"
		      flatten="true" verbose="${verbose}">
			<fileset dir="${lib.dir}"
			         includesfile="${includeslibraries}"
			         includes="dummy_file" />
			<fileset dir="${dist.dir}/lib"
			         includesfile="${includeslibraries}"
			         includes="dummy_file" />
		</copy>
	</target>


	<!-- TARGET compile_module -->
	<!-- On compile tous les fichiers du module dans le répertoire temporaire qui se trouve
	sous ${tmp.dir}/${module.type}/${module.name}/${package.dir}/${sub.dir}. Ce répertoire est différent de
	celui d'Eclipse pour éviter les interférences et permettre d'utiliser éventuellement
	un autre JDK. -->
	<target name="compile_module">
		<echo message="Compilation du module ${module.type} : ${module.name}" />
		<!-- Les sources à inclure sont recherchés par cette propriété -->
		<property name="includesfiles"
		          value="${ant.includes.dir}/${module.type}.${module.name}.class.include" />
		<available file="${includesfiles}"
		           type="file"
		           property="include.${module.name}.present" />
		<fail unless="include.${module.name}.present"
		      message="Attention: Le fichier ${includesfiles} n'existe pas. Compilation du projet impossible" />

		<property name="output.dir"
		          value="${tmp.dir}/${module.type}/${module.name}/${package.dir}/${sub.dir}" />
		<mkdir dir="${output.dir}" />
		<!-- dummy_file est nécessaire pour le cas où le includesfiles est vide,
		 sinon javac prend tout src/java et tout generated. -->
		<mkdir dir="${generated.dir}" />
		<javac srcdir="${src.dir}:${generated.dir}"
		       destdir="${output.dir}"
		       includesfile="${includesfiles}"
		       includes="dummy_file"
		       excludes="**/CVS/**,**/cvs/**"
		       classpathref="project.classpath"
		       debug="on"
		       debuglevel="lines,vars,source"
		       verbose="${verbose}" />

		<!-- On recopie les fichiers non java dans le répertoire temporaire qui se trouve sous
		${tmp.dir}/${module.type}/${module.name}/${package.dir}/${sub.dir}, comme le ferait Eclipse.
		On utilise le fichier includesfiles sans les fichiers java. dummy_file est nécessaire si
		le includesfile est vide -->
		<copy todir="${output.dir}" verbose="${verbose}">
			<fileset dir="${src.dir}"
			         includesfile="${includesfiles}"
			         includes="dummy_file"
			         excludes="**/CVS/**,**/cvs/**,**/*.java" />
			<fileset dir="${generated.dir}"
			         includesfile="${includesfiles}"
			         includes="dummy_file"
			         excludes="**/CVS/**,**/cvs/**,**/*.java" />
		</copy>

		<!-- On lance l'enhancement jdo si le projet est de type versant VOA JDO -->
		<!-- Supprimé en version 3.2.0 -->
		<!--
		<available file="${versant.filename}"
		           type="file"
		           property="versant.filename.present" />
		<antcall target="enhance_jdo" />
		-->

		<!-- On lance la compilation java-javascript si le projet est GWT -->
		<condition property="is.lib">
			<equals arg1="${module.type}" arg2="lib" />
		</condition>
		<condition property="is.war">
			<equals arg1="${module.type}" arg2="war" />
		</condition>
		<antcall target="compile_gwt" />
	</target>

	<!-- JDO supprimé en version 3.2.0 -->
	<!--
	<target name="enhance_jdo" if="versant.filename.present" depends="define_jdo">
		<echo message="Enhancement JDO du module ${module.type} : ${module.name}" />
		<copy file="${versant.filename}" todir="${output.dir}" />
		<jdo-enhance outputdir="${output.dir}">
			<persistentaware dir="${output.dir}" />
		</jdo-enhance>
	</target>
 	-->

	<target name="compile_gwt" if="gwt.compile" >
		<antcall target="compile_gwt_lib" />
		<antcall target="compile_gwt_war" />
	</target>

	<target name="compile_gwt_lib" if="is.lib">
		<echo message="Copie GWT des fichiers sources du module ${module.type} : ${module.name}" />
		<!-- Il faut mettre les sources java dans le jar pour GWT -->
		<copy todir="${output.dir}">
			<fileset dir="${src.dir}"
			         includesfile="${includesfiles}"
			         includes="dummy_file,**/*.java" />
			<fileset dir="${generated.dir}"
			         includesfile="${includesfiles}"
			         includes="dummy_file,**/*.java" />
		</copy>
	</target>

	<target name="compile_gwt_war" if="is.war" depends="define_gwt">
		<echo message="Compilation GWT du module ${module.type} : ${module.name}" />
		<!-- Chemin absolu car dans certains cas Eclipse positionne le working directory dans ant -->
		<!-- Le style peut prendre les valeurs obfuscated, pretty et detailed -->
		<gwtcompile destdir="${basedir}/${tmp.dir}/${module.type}/${module.name}/${package.dir}"
		            optimize="true"
					verbose="${verbose}"
					style="obfuscated">
			<fileset dir="${src.dir}" includesfile="${includesfiles}">
			</fileset>
		</gwtcompile>
	</target>

	<!-- TARGET clean -->
	<target name="clean">
		<!-- Suppression des fichiers temporaires -->
		<!-- On ne supprime pas les descripteurs même s'ils sont générés automatiquement -->
		<!-- Au cas où, on ne supprime pas le jar final dans ${dist.dir}.
		De toute façon, la suppression des fichiers temporaires suffit pour
		provoquer la regénération complète -->
		<echo message="Nettoyage du module ${module.type} : ${module.name}" />
		<delete dir="${tmp.dir}/${module.type}/${module.name}"
		        includeemptydirs="true" />
	</target>

	<!-- TARGET internet init -->
	<!-- Création des répertoires nécessaires au fonctionnement du toolkit -->
	<target name="init">
		<fail unless="module.name"
		      message="Utiliser le fichier build.xml ou l'un des fichiers sous modules" />
		<mkdir dir="${dist.dir}/ejb" />
		<mkdir dir="${dist.dir}/lib" />
		<mkdir dir="${dist.dir}/war" />
		<mkdir dir="${dist.dir}/war-ws" />
		<mkdir dir="${dist.dir}/ear" />
		<mkdir dir="${dist.dir}/rar" />
		<mkdir dir="${dist.dir}/sip" />
		<mkdir dir="${tmp.dir}/${module.type}/${module.name}" />
		<mkdir dir="${generated.dir}" />
		<mkdir dir="${j2ee.dir}/${module.type}/${module.name}" />
		<mkdir dir="${j2ee.dir}/${module.type}/common" />
	</target>

</project>
