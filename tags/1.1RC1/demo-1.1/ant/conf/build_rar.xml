<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- CVS History
  $Log: build_rar.xml,v $
  Revision 1.1  2007/10/24 13:35:33  tvzl8571
  *** empty log message ***

  Revision 1.1  2007/08/14 07:55:55  tvzl8571
  TatamiDemo, projet demontrant les differents composants du projet Tatami

  Revision 1.1  2007/05/25 12:27:21  beal6226
  Exemple d'utilisation de GWT avec :
  - Un menu déroulant qui fait apparaitre une popup
  - Un bouton qui fait apparaitre un hello world
  - Des champs de saisie qui modifient dynamiquement un tableau de données.
  - Une utilisation de GWT RPC pour récupérer des données côté serveur (après, c'est bouchonné, il n'y a pas de SGBD).

  Revision 1.2  2006/11/02 13:54:48  beal6226
  Synchronisation avec referentiel plateforme Eclipse

  Revision 1.1  2006/10/10 08:10:37  ajta5630
  Intérgration dans la barre d'outils et le menu du workbench. Intégration de l'aide

  Revision 1.1  2006/03/20 16:31:35  beal6226
  Initial plugin version

  Revision 1.6  2006/03/15 16:49:55  beal6226
  La variable TODAY doit être définie dans le projet où elle est utilisée. Le timestamp est donc placé devant chaque utilisation de TODAY.
  Ajout d'une description aux tâches les plus utiles pour un accès plus facile avec la vue outline d'Eclipse.
  Ajout de doubles traits dans les messages ant pour bien visualiser la fin de construction de chaque module

  Revision 1.5  2006/02/17 14:52:48  beal6226
  Factorisation de la tâche init

  Revision 1.4  2006/02/17 13:01:31  beal6226
  Utilisation des tâches serverdeploy pour Jonas

  Revision 1.3  2006/01/25 15:53:39  yrka8220
  Nettoyage des commentaires

  Revision 1.2  2006/01/24 16:41:44  yrka8220
  Modif du build RAR : les librairies inclues dans le module RAR doivent être copiée à la racine du RAR et non dans un dossier "lib"

  Revision 1.1  2006/01/24 10:50:08  yrka8220
  Ajout du module rar
  -->
<!DOCTYPE project [
		<!ENTITY setenv SYSTEM "../conf/setenv.xml">	
	]>
<project name="build_rar" default="init" basedir="../..">

	<!-- Chargement des propriétés -->
	&setenv;
    <property file="${ant.modules.dir}/${module.type}.${module.name}.properties" />

	<!-- TARGET package -->
	<!-- Le packaging d'un module lib consiste à copier tous les fichiers J2EE dans le 
	répertoire temporaire du module, en remplaçant les variables du type ${variable} par 
	leur valeur pour les fichiers *.template.*.	Ensuite, on copie les modules et les 
	librairies, et on package le tout dans un rar. -->
	<target name="package" depends="init" description="packaging rar">
		<ant antfile="${ant.conf.dir}/common.xml" target="copy_j2ee" />
		<antcall target="rar" />
		<echo message="========== Packaging du module terminé, consulter ${dist.dir}/${module.type}/${module.name}.rar ==========" />
	</target>

	<!-- TARGET deploy -->
	<!-- On déploie le rar dans le serveur indiqué par ${server.name}. -->
	<target name="deploy" depends="init" description="déploiement rar">
		<antcall target="${server.name}_deploy" />
		<echo message="Déploiement du module ${module.name}.rar sur ${server.name} terminé" />
	</target>

	<!-- TARGET undeploy -->
	<!-- On déploie le rar dans le serveur indiqué par ${server.name}. -->
	<target name="undeploy" depends="init">
		<antcall target="${server.name}_undeploy" />
		<echo message="Suppression du module ${module.name}.rar sur ${server.name} terminé" />
	</target>

	<!-- TARGET rar -->
	<!-- On construit le fichier jar en packageant les fichiers préparés -->
	<target name="rar" description="lancement rar">

		<!-- Copie des librairies -->
		<ant antfile="${ant.conf.dir}/common.xml" target="copy_lib">
			<property name="sub.dir" value="" />
		</ant>

		<!-- Construction du rar -->
		<echo message="Construction du fichier rar ${dist.dir}/${module.type}/${module.name}.rar" />
		<tstamp>
			<format property="TODAY" pattern="d-MMM-yyyy hh:mm:ss aa" locale="en" />
		</tstamp>
		<jar destfile="${dist.dir}/${module.type}/${module.name}.rar"
		     filesetmanifest="merge">
			<fileset dir="${tmp.dir}/${module.type}/${module.name}/${package.dir}">
			</fileset>
			<manifest>
				<attribute name="Release-Date" value="${TODAY}" />
				<attribute name="Created-By"
				           value="${java.vm.version} (${java.vm.vendor})" />
				<attribute name="Company" value="France Telecom" />
				<attribute name="Toolkit-Version" value="${toolkit.version}" />
				<attribute name="Module-Name" value="${module.name}" />
			</manifest>


		</jar>
	</target>

	<!-- TARGET jonas_deploy -->
	<!-- Copie du fichier dans le répertoire de jonas et lancement du déploiement.
	Jonas ne veut pas déployer une application qui existe déjà. On lance donc
	systématiquement un undeploy avant le deploy -->
	<target name="jonas_deploy" depends="define_jonas" description="déploiement jonas">
		<copy file="${dist.dir}/${module.type}/${module.name}.rar"
		      todir="${jonas.base}/rars"
		      overwrite="true" />
		<path id="deploy.classpath">
			<fileset dir="${jonas.root}">
				<include name="lib/common/ow_jonas_bootstrap.jar" />
			</fileset>
			<fileset dir="${java.home}">
				<include name="/lib/tools.jar" />
				<include name="/jre/lib/rt.jar" />
			</fileset>
		</path>
		<echo message="undeploy de l'ancienne version - Ne pas tenir compte du message d'erreur si l'ejb n'était pas deployé" />
		<jonas-serverdeploy action="undeploy"
		                    source="${jonas.base}/rars/${module.name}.rar">
			<jonas jonasRoot="${jonas.root}"
			       jonasBase="${jonas.base}"
			       servername="${jonas.server.name}">
				<classpath refid="deploy.classpath" />
			</jonas>
		</jonas-serverdeploy>
		<!--java classname="org.objectweb.jonas.server.Bootstrap"
		      fork="true"
		      classpathref="deploy.classpath">
			<arg value="org.objectweb.jonas.adm.JonasAdmin" />
			<arg value="-r" />
			<arg value="${jonas.base}/rars/${module.name}.rar" />
			<jvmarg value="-Dinstall.root=${jonas.root}" />
			<jvmarg value="-Djonas.base=${jonas.base}" />
			<jvmarg value="-Djava.security.policy=${jonas.base}/conf/java.policy" />
			<jvmarg value="-Djonas.classpath=" />
			<jvmarg value="-Djonas.default.classloader=true" />
			<jvmarg value="-Djavax.rmi.CORBA.PortableRemoteObjectClass=org.objectweb.carol.rmi.multi.MultiPRODelegate" />
			<jvmarg value="-Djava.naming.factory.initial=org.objectweb.carol.jndi.spi.MultiOrbInitialContextFactory" />
			<jvmarg value="-Djava.security.auth.login.config=${jonas.root}/conf/jaas.config" />
			<jvmarg value="-Djava.rmi.server.RMIClassLoaderSpi=org.objectweb.jonas.server.RemoteClassLoaderSpi" />
		</java-->
		<echo message="deploy de la nouvelle version" />
		<jonas-serverdeploy action="deploy"
		                    source="${jonas.base}/rars/${module.name}.rar">
			<jonas jonasRoot="${jonas.root}"
			       jonasBase="${jonas.base}"
			       serverName="${jonas.server.name}">
				<classpath refid="deploy.classpath" />
			</jonas>
		</jonas-serverdeploy>
		<!--java classname="org.objectweb.jonas.server.Bootstrap"
		      fork="true"
		      classpathref="deploy.classpath">
			<arg value="org.objectweb.jonas.adm.JonasAdmin" />
			<arg value="-a" />
			<arg value="${jonas.base}/rars/${module.name}.rar" />
			<jvmarg value="-Dinstall.root=${jonas.root}" />
			<jvmarg value="-Djonas.base=${jonas.base}" />
			<jvmarg value="-Djava.security.policy=${jonas.base}/conf/java.policy" />
			<jvmarg value="-Djonas.classpath=" />
			<jvmarg value="-Djonas.default.classloader=true" />
			<jvmarg value="-Djavax.rmi.CORBA.PortableRemoteObjectClass=org.objectweb.carol.rmi.multi.MultiPRODelegate" />
			<jvmarg value="-Djava.naming.factory.initial=org.objectweb.carol.jndi.spi.MultiOrbInitialContextFactory" />
			<jvmarg value="-Djava.security.auth.login.config=${jonas.root}/conf/jaas.config" />
			<jvmarg value="-Djava.rmi.server.RMIClassLoaderSpi=org.objectweb.jonas.server.RemoteClassLoaderSpi" />
		</java-->
	</target>

	<!-- TARGET jonas_undeploy -->
	<!-- Suppression de l'application sur Jonas -->
	<target name="jonas_undeploy" depends="define_jonas">
		<jonas-serverdeploy action="undeploy"
		                    source="${jonas.base}/rars/${module.name}.rar">
			<jonas jonasRoot="${jonas.root}"
			       jonasBase="${jonas.base}"
			       servername="${jonas.server.name}">
				<classpath refid="deploy.classpath" />
			</jonas>
		</jonas-serverdeploy>
	</target>

	<!-- TARGET weblogic_deploy -->
	<!-- Copie du fichier dans le répertoire de weblogic et lancement du déploiement.
	Weblogic accepte de déployer une application qui existe déjà. -->
	<!-- NB : Si on déploie plusieurs applications au sein du même script ant, une
	pile d'exceptions est générée par weblogic (DeploymentNotificationCallback,
	ClassCastException) à partir du deuxième déploiement. Ceci n'est cependant pas
	bloquante puisque l'application est malgré tout correctement déployée -->
	<target name="weblogic_deploy" depends="define_weblogic" description="déploiement weblogic">
		<copy file="${dist.dir}/${module.type}/${module.name}.rar"
		      todir="${weblogic.deploy.dir}"
		      overwrite="true" />
		<wldeploy action="deploy"
		          source="${weblogic.deploy.dir}/${module.name}.rar"
		          name="${module.name}"
		          user="${weblogic.user}"
		          password="${weblogic.password}"
		          verbose="true"
		          adminurl="${weblogic.adminurl}"
		          debug="true"
		          targets="${weblogic.servers.name}" />
	</target>

	<!-- TARGET weblogic_undeploy -->
	<!-- A priori inutile -->
	<target name="weblogic_undeploy" depends="define_weblogic">
		<wldeploy action="undeploy"
		          source="${weblogic.deploy.dir}/${module.name}.rar"
		          name="${module.name}"
		          user="${weblogic.user}"
		          password="${weblogic.password}"
		          verbose="true"
		          adminurl="${weblogic.adminurl}"
		          debug="true"
		          targets="${weblogic.servers.name}"
		          failonerror="false" />
	</target>

	<!-- TARGET websphere_deploy -->
	<!-- Rien à faire, websphere n'est pas installé en local -->
	<target name="websphere_deploy">

	</target>


	<!-- TARGET internet init -->
	<!-- Création des répertoires nécessaires au fonctionnement du toolkit -->
	<target name="init">
		<ant antfile="${ant.conf.dir}/common.xml" target="init" />
	</target>

</project>